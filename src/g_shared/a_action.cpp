#include "actor.h"
#include "thingdef/thingdef.h"
#include "p_conversation.h"
#include "p_lnspec.h"
#include "a_action.h"
#include "m_random.h"
#include "s_sound.h"
#include "d_player.h"
#include "p_local.h"
#include "p_terrain.h"
#include "p_enemy.h"
#include "statnums.h"
#include "templates.h"
#include "gi.h" //GHK ADDED

static FRandom pr_freezedeath ("FreezeDeath");
static FRandom pr_icesettics ("IceSetTics");
static FRandom pr_freeze ("FreezeDeathChunks");
static FRandom pr_gkspawnchance2("gkchance2"); //ghk
static FRandom pr_gkspawnchance("gkchance"); //ghk

EXTERN_CVAR (Bool, sd_artifacts);
EXTERN_CVAR (Bool, sd_custom_replacements);
//EXTERN_CVAR (Bool, sp_random_custom_monsters);
EXTERN_CVAR (Bool, sp_random_custom_monsters2)
EXTERN_CVAR (Int, sd_kill_extrahealth_chance2)
EXTERN_CVAR (Int, sd_kill_artifact_chance2)

//EXTERN_CVAR (Bool, sp_random_custom_monsters); //ghk
//EXTERN_CVAR (Int, sd_global_hiscores) //GHK

extern int rndindex; //ghk
extern int rndindexA;
//ghk array for holding current artifacts spawned so that there is 
//greater randomization/variety.
extern int arrArtifacts[1000]; 


/*static const unsigned char rndtable2[256]= {
0,   8, 109, 220, 222, 241, 149, 107,  75, 248, 254, 140,  16,  66 ,
    74,  21, 211,  47,  80, 242, 154,  27, 205, 128, 161,  89,  77,  36 ,
    95, 110,  85,  48, 212, 140, 211, 249,  22,  79, 200,  50,  28, 188 ,
    52, 140, 202, 120,  68, 145,  62,  70, 184, 190,  91, 197, 152, 224 ,
    149, 104,  25, 178, 252, 182, 202, 182, 141, 197,   4,  81, 181, 242 ,
    145,  42,  39, 227, 156, 198, 225, 193, 219,  93, 122, 175, 249,   0 ,
    175, 143,  70, 239,  46, 246, 163,  53, 163, 109, 168, 135,   2, 235 ,
    25,  92,  20, 145, 138,  77,  69, 166,  78, 176, 173, 212, 166, 113 ,
    94, 161,  41,  50, 239,  49, 111, 164,  70,  60,   2,  37, 171,  75 ,
    136, 156,  11,  56,  42, 146, 138, 229,  73, 146,  77,  61,  98, 196 ,
    135, 106,  63, 197, 195,  86,  96, 203, 113, 101, 170, 247, 181, 113 ,
    80, 250, 108,   7, 255, 237, 129, 226,  79, 107, 112, 166, 103, 241 ,
    24, 223, 239, 120, 198,  58,  60,  82, 128,   3, 184,  66, 143, 224 ,
    145, 224,  81, 206, 163,  45,  63,  90, 168, 114,  59,  33, 159,  95 ,
    28, 139, 123,  98, 125, 196,  15,  70, 194, 253,  54,  14, 109, 226 ,
    71,  17, 161,  93, 186,  87, 244, 138,  20,  52, 123, 251,  26,  36 ,
    17,  46,  52, 231, 232,  76,  31, 221,  84,  37, 216, 165, 212, 106 ,
    197, 242,  98,  43,  39, 175, 254, 145, 190,  84, 118, 222, 187, 136 ,
    120, 163, 236, 249 };
*/

//static const unsigned char rndtable2[4096]= {75, 174, 231, 176, 184, 183, 139, 129, 216, 173, 11, 116, 171, 249, 214, 146, 95, 223, 97, 41, 101, 12, 183, 38, 239, 40, 7, 89, 178, 224, 123, 95, 253, 86, 235, 199, 94, 242, 44, 82, 239, 144, 203, 4, 133, 249, 34, 137, 117, 66, 75, 151, 202, 206, 181, 240, 9, 159, 97, 59, 80, 48, 193, 63, 52, 47, 131, 196, 187, 122, 32, 46, 123, 254, 62, 206, 198, 143, 89, 28, 253, 96, 30, 69, 22, 116, 23, 223, 60, 89, 38, 80, 77, 107, 52, 244, 144, 47, 52, 82, 165, 151, 98, 75, 64, 164, 5, 233, 129, 87, 199, 76, 66, 227, 195, 50, 182, 250, 13, 238, 11, 38, 83, 181, 144, 129, 188, 245, 20, 140, 190, 198, 198, 109, 240, 160, 226, 191, 122, 45, 227, 241, 160, 106, 185, 80, 105, 111, 211, 7, 37, 175, 74, 231, 199, 24, 165, 24, 177, 68, 16, 190, 122, 182, 176, 99, 212, 96, 31, 239, 89, 150, 152, 65, 89, 102, 148, 158, 123, 76, 253, 233, 246, 99, 251, 253, 151, 173, 193, 101, 200, 90, 72, 183, 248, 201, 46, 196, 109, 177, 68, 66, 175, 232, 110, 213, 58, 81, 138, 26, 232, 200, 34, 228, 8, 86, 108, 244, 150, 128, 5, 68, 86, 86, 103, 100, 227, 196, 218, 171, 239, 169, 242, 127, 13, 144, 54, 169, 62, 45, 223, 128, 155, 71, 189, 176, 241, 116, 141, 116, 42, 228, 251, 136, 189, 95, 161, 104, 26, 225, 242, 33, 53, 131, 19, 182, 239, 192, 236, 16, 32, 241, 181, 91, 65, 123, 81, 64, 205, 39, 143, 105, 89, 69, 105, 149, 43, 79, 166, 27, 19, 93, 103, 132, 189, 29, 22, 15, 122, 215, 25, 240, 187, 214, 148, 158, 65, 157, 19, 202, 214, 108, 191, 116, 26, 28, 66, 51, 140, 159, 200, 197, 122, 72, 49, 49, 252, 170, 106, 206, 91, 252, 112, 57, 157, 224, 53, 135, 2, 221, 226, 9, 85, 47, 160, 153, 224, 57, 244, 161, 197, 143, 108, 31, 15, 154, 228, 100, 216, 180, 62, 176, 1, 7, 185, 147, 223, 163, 142, 183, 103, 16, 127, 194, 195, 228, 71, 41, 113, 63, 234, 241, 41, 140, 173, 12, 199, 131, 134, 95, 120, 81, 117, 104, 6, 152, 242, 91, 59, 82, 32, 147, 142, 161, 244, 144, 55, 95, 246, 241, 234, 106, 77, 150, 47, 223, 79, 153, 43, 249, 152, 208, 72, 152, 230, 119, 228, 131, 177, 208, 101, 3, 122, 223, 208, 201, 85, 221, 5, 237, 247, 168, 28, 138, 9, 62, 111, 146, 229, 57, 242, 144, 119, 117, 66, 100, 214, 53, 226, 105, 199, 147, 163, 62, 15, 158, 1, 247, 167, 51, 170, 177, 186, 154, 12, 75, 13, 227, 209, 153, 67, 67, 235, 130, 227, 3, 114, 67, 179, 31, 63, 158, 38, 81, 161, 193, 58, 42, 235, 137, 29, 186, 246, 55, 42, 151, 208, 177, 212, 38, 13, 63, 30, 174, 18, 9, 220, 72, 193, 183, 16, 99, 166, 74, 254, 191, 140, 140, 138, 150, 23, 183, 134, 3, 111, 82, 78, 34, 152, 220, 36, 222, 90, 203, 2, 18, 242, 235, 173, 148, 251, 172, 221, 176, 221, 196, 45, 207, 102, 42, 83, 75, 189, 203, 1, 4, 246, 52, 35, 216, 250, 10, 17, 242, 106, 110, 121, 222, 76, 79, 70, 92, 23, 49, 235, 66, 180, 61, 207, 34, 160, 56, 111, 226, 23, 139, 239, 105, 182, 200, 181, 37, 138, 212, 66, 110, 162, 102, 118, 222, 231, 200, 200, 31, 182, 112, 155, 46, 50, 155, 55, 191, 238, 50, 83, 70, 202, 238, 46, 18, 67, 74, 126, 44, 159, 180, 116, 210, 142, 110, 1, 240, 191, 176, 100, 142, 252, 236, 225, 240, 6, 155, 254, 12, 99, 122, 85, 12, 185, 17, 126, 214, 8, 31, 253, 245, 107, 195, 63, 177, 155, 97, 31, 10, 91, 175, 95, 238, 133, 247, 130, 58, 54, 53, 120, 250, 195, 161, 56, 19, 249, 95, 67, 146, 232, 241, 149, 222, 69, 190, 20, 127, 12, 40, 5, 108, 108, 146, 113, 192, 183, 105, 132, 253, 15, 55, 71, 133, 31, 241, 248, 98, 20, 11, 110, 100, 45, 9, 166, 68, 59, 67, 133, 168, 50, 224, 123, 42, 178, 93, 85, 162, 69, 158, 246, 189, 82, 47, 76, 96, 167, 55, 215, 69, 131, 187, 182, 54, 166, 227, 231, 110, 223, 82, 198, 230, 228, 72, 140, 222, 23, 151, 153, 121, 248, 173, 227, 23, 168, 132, 192, 242, 198, 202, 164, 167, 119, 129, 8, 128, 24, 14, 8, 195, 90, 21, 115, 216, 57, 99, 112, 174, 15, 226, 182, 212, 181, 223, 145, 145, 75, 222, 161, 133, 120, 214, 73, 181, 210, 0,60, 81, 218, 62, 129, 50, 180, 216, 143, 211, 118, 104, 182, 131, 55, 199, 97, 147, 199, 110, 247, 171, 249, 195, 75, 192, 224, 230, 149, 182, 101, 234, 7, 145, 200, 174, 188, 217, 109, 84, 203, 250, 80, 230, 177, 138, 53, 202, 28, 200, 97, 120, 131, 39, 36, 121, 98, 88, 32, 170, 75, 42, 114, 171, 47, 137, 100, 176, 100, 2, 68, 37, 7, 149, 94, 51, 35, 239, 216, 185, 13, 225, 107, 60, 8, 151, 94, 39, 243, 8, 111, 5, 104, 41, 107, 89, 254, 164, 59, 141, 7, 63, 74, 149, 22, 159, 206, 15, 40, 219, 119, 65, 18, 11, 132, 147, 3, 46, 11, 58, 216, 198, 116, 79, 175, 253, 241, 232, 249, 121, 145, 156, 238, 225, 49, 153, 192, 165, 99, 145, 97, 178, 140, 186, 13, 215, 80, 167, 19, 200, 77, 254, 92, 58, 216, 232, 123, 4, 21, 156, 203, 15, 72, 154, 62, 168, 219, 20, 11, 213, 164, 81, 94, 144, 153, 61, 129, 34, 245, 238, 179, 63, 59, 139, 27, 109, 35, 251, 190, 197, 208, 182, 127, 94, 4, 69, 72, 165, 42, 83, 180, 84, 93, 205, 78, 6, 70, 243, 96, 52, 239, 102, 56, 236, 69, 217, 39, 197, 205, 134, 90, 90, 205, 107, 239, 28, 147, 52, 47, 115, 12, 215, 252, 212, 76, 24, 226, 22, 188, 167, 28, 44, 14, 7, 9, 130, 235, 46, 110, 55, 155, 167, 160, 254, 97, 17, 126, 186, 152, 242, 192, 155, 206, 80, 166, 108, 31, 188, 132, 113, 75, 149, 254, 163, 189, 130, 29, 16, 174, 180, 91, 189, 50, 36, 38, 249, 203, 144, 4, 176, 111, 87, 140, 73, 172, 221, 59, 166, 169, 238, 179, 247, 68, 129, 188, 145, 144, 59, 181, 86, 53, 100, 181, 12, 241, 51, 200, 178, 182, 23, 1, 254, 83, 29, 66, 52, 156, 149, 142, 220, 91, 234, 191, 113, 26, 255, 68, 112, 7, 125, 88, 79, 199, 31, 204, 134, 7, 133, 251, 17, 245, 9, 25, 244, 199, 191, 78, 202, 94, 64, 128, 202, 247, 167, 166, 142, 192, 15, 212, 164, 147, 247, 14, 251, 246, 20, 212, 115, 201, 145, 88, 28, 134, 51, 189, 53, 65, 145, 177, 166, 207, 92, 1, 98, 141, 186, 71, 35, 78, 228, 81, 34, 226, 119, 215, 118, 141, 97, 137, 119, 77, 23, 94, 212, 205, 55, 37, 251, 8, 22, 33, 52, 119, 93, 84, 225, 174, 132, 204, 165, 214, 254, 210, 78, 102, 220, 113, 57, 192, 243, 23, 66, 63, 237, 138, 85, 23, 68, 128, 164, 101, 155, 91, 160, 84, 51, 149, 44, 228, 150, 84, 233, 142, 119, 123, 42, 21, 90, 71, 176, 159, 168, 56, 137, 244, 15, 154, 45, 86, 2, 105, 109, 4, 20, 201, 9, 236, 2, 120, 86, 107, 95, 223, 34, 38, 146, 138, 180, 123, 231, 180, 5, 189, 176, 157, 60, 204, 215, 27, 253, 35, 197, 152, 125, 158, 47, 88, 229, 163, 43, 80, 134, 39, 18, 123, 24, 110, 144, 175, 142, 248, 2, 124, 43, 42, 45, 138, 248, 190, 154, 51, 89, 252, 1, 216, 42, 224, 175, 143, 185, 61, 140, 79, 0,217, 207, 170, 172, 51, 193, 157, 225, 79, 155, 134, 46, 151, 23, 192, 192, 54, 100, 174, 223, 196, 245, 57, 125, 145, 11, 245, 252, 182, 255, 11, 129, 157, 20, 19, 148, 91, 213, 219, 137, 102, 95, 218, 191, 207, 90, 157, 240, 39, 6, 72, 155, 128, 164, 130, 248, 249, 62, 162, 76, 81, 29, 65, 208, 152, 88, 105, 87, 75, 106, 223, 111, 81, 36, 218, 2, 97, 58, 126, 114, 107, 93, 57, 156, 88, 0,229, 155, 141, 231, 32, 213, 229, 59, 216, 153, 248, 1, 155, 136, 129, 226, 88, 57, 155, 167, 190, 154, 143, 243, 100, 52, 80, 223, 253, 218, 216, 92, 246, 41, 205, 162, 132, 6, 109, 180, 39, 122, 38, 134, 58, 73, 116, 114, 196, 41, 203, 133, 79, 246, 128, 155, 217, 220, 117, 99, 104, 79, 109, 35, 216, 171, 118, 155, 202, 115, 214, 98, 114, 95, 61, 221, 41, 1, 180, 114, 75, 69, 41, 116, 226, 227, 173, 67, 17, 194, 226, 38, 228, 82, 34, 192, 180, 62, 223, 112, 113, 16, 18, 99, 180, 22, 196, 35, 130, 97, 75, 240, 196, 186, 199, 189, 150, 83, 144, 85, 76, 31, 94, 26, 10, 58, 163, 216, 107, 11, 172, 66, 83, 145, 97, 26, 157, 33, 165, 126, 201, 155, 89, 131, 23, 134, 207, 243, 202, 106, 152, 59, 123, 130, 1, 108, 98, 53, 127, 183, 138, 150, 167, 22, 197, 34, 230, 110, 216, 205, 99, 83, 82, 227, 244, 87, 196, 84, 253, 239, 222, 210, 81, 62, 39, 143, 19, 78, 117, 106, 157, 1, 126, 67, 244, 102, 238, 77, 118, 79, 144, 141, 144, 165, 238, 43, 76, 132, 191, 172, 114, 9, 41, 67, 214, 164, 138, 231, 34, 2, 23, 85, 6, 162, 5, 21, 113, 5, 103, 42, 161, 117, 47, 132, 136, 197, 213, 30, 0,155, 126, 82, 180, 140, 56, 82, 134, 22, 253, 105, 85, 31, 239, 99, 222, 6, 224, 184, 96, 42, 17, 204, 11, 98, 98, 100, 101, 55, 211, 97, 199, 121, 78, 235, 250, 121, 71, 124, 234, 62, 152, 157, 6, 30, 74, 208, 168, 128, 207, 199, 77, 215, 49, 241, 241, 160, 97, 124, 55, 216, 177, 16, 78, 90, 231, 230, 175, 120, 255, 119, 233, 170, 16, 113, 152, 34, 27, 196, 189, 6, 185, 76, 53, 108, 207, 233, 1, 74, 107, 21, 123, 84, 229, 119, 80, 37, 65, 159, 62, 19, 111, 188, 58, 237, 224, 44, 147, 3, 79, 177, 22, 25, 38, 140, 240, 125, 82, 201, 98, 194, 144, 255, 213, 192, 119, 22, 254, 3, 159, 193, 20, 51, 70, 86, 11, 0,172, 159, 244, 146, 86, 241, 67, 251, 238, 8, 212, 242, 83, 214, 10, 191, 175, 110, 5, 143, 46, 213, 153, 45, 237, 243, 234, 211, 82, 238, 249, 225, 226, 161, 200, 42, 236, 159, 172, 36, 51, 192, 162, 93, 191, 50, 70, 132, 190, 10, 27, 178, 1, 140, 83, 255, 77, 183, 80, 3, 56, 28, 59, 123, 158, 194, 5, 114, 42, 187, 22, 230, 140, 194, 165, 146, 52, 200, 146, 101, 73, 67, 244, 10, 184, 184, 110, 72, 233, 144, 107, 18, 113, 234, 17, 189, 204, 61, 155, 106, 199, 128, 88, 111, 127, 226, 34, 131, 149, 125, 161, 137, 54, 236, 240, 9, 227, 125, 154, 219, 15, 106, 6, 24, 132, 177, 116, 7, 145, 48, 214, 180, 175, 8, 99, 239, 47, 203, 248, 87, 236, 155, 172, 236, 203, 15, 230, 162, 249, 223, 153, 99, 119, 60, 209, 164, 132, 26, 7, 190, 227, 18, 232, 31, 199, 35, 127, 13, 83, 61, 143, 195, 130, 126, 10, 158, 240, 252, 95, 112, 208, 67, 23, 110, 225, 240, 241, 186, 198, 109, 65, 59, 123, 101, 204, 104, 249, 120, 199, 149, 105, 147, 246, 168, 59, 128, 243, 67, 177, 166, 10, 29, 59, 44, 206, 197, 228, 136, 190, 11, 227, 35, 227, 227, 233, 176, 85, 80, 130, 229, 237, 113, 38, 140, 83, 230, 47, 43, 153, 216, 1, 52, 116, 12, 1, 53, 229, 252, 4, 127, 209, 107, 237, 176, 165, 138, 6, 176, 137, 219, 122, 21, 52, 210, 45, 77, 130, 120, 138, 160, 116, 180, 191, 214, 4, 69, 254, 81, 143, 65, 254, 117, 72, 147, 238, 144, 33, 24, 135, 208, 58, 222, 161, 98, 179, 166, 255, 168, 4, 205, 164, 74, 206, 196, 249, 223, 42, 156, 155, 74, 232, 107, 101, 15, 78, 19, 163, 150, 6, 100, 242, 220, 216, 198, 108, 241, 214, 70, 51, 160, 33, 100, 93, 198, 152, 22, 110, 20, 221, 28, 107, 121, 24, 82, 110, 31, 226, 136, 117, 120, 136, 91, 179, 249, 141, 164, 76, 17, 23, 106, 227, 46, 83, 158, 182, 22, 117, 140, 84, 67, 80, 172, 31, 198, 173, 91, 7, 7, 225, 35, 182, 154, 15, 94, 134, 214, 146, 115, 60, 212, 4, 89, 100, 72, 232, 224, 178, 8, 11, 237, 85, 28, 231, 254, 175, 233, 65, 76, 40, 97, 74, 82, 30, 34, 35, 228, 26, 38, 199, 164, 140, 243, 119, 92, 56, 36, 241, 231, 106, 231, 146, 29, 218, 65, 116, 181, 198, 224, 84, 90, 105, 227, 194, 196, 128, 62, 159, 94, 240, 83, 137, 229, 237, 228, 31, 107, 64, 191, 97, 98, 110, 106, 163, 157, 139, 161, 166, 205, 110, 178, 110, 128, 209, 130, 103, 160, 205, 181, 31, 81, 134, 114, 202, 45, 186, 61, 52, 35, 48, 163, 121, 202, 93, 219, 73, 82, 17, 8, 200, 72, 245, 105, 124, 9, 240, 220, 200, 251, 77, 179, 173, 192, 177, 123, 107, 2, 133, 75, 127, 244, 68, 233, 110, 128, 194, 141, 75, 131, 24, 244, 181, 20, 37, 81, 113, 102, 42, 216, 57, 150, 20, 216, 181, 200, 72, 188, 206, 3, 226, 247, 150, 150, 48, 129, 83, 35, 48, 128, 194, 27, 151, 177, 14, 52, 158, 116, 37, 64, 79, 145, 84, 210, 197, 132, 50, 129, 3, 146, 177, 181, 114, 222, 92, 181, 86, 183, 57, 38, 152, 84, 229, 42, 83, 168, 178, 47, 147, 88, 115, 196, 111, 116, 191, 237, 140, 99, 24, 35, 159, 86, 69, 136, 45, 175, 188, 229, 56, 247, 160, 175, 235, 118, 24, 165, 155, 244, 121, 177, 168, 254, 155, 59, 235, 172, 58, 124, 87, 58, 13, 98, 67, 156, 130, 33, 239, 201, 177, 214, 43, 211, 23, 175, 243, 138, 58, 107, 84, 61, 36, 122, 36, 28, 222, 212, 203, 197, 221, 32, 78, 249, 80, 23, 33, 162, 195, 227, 70, 25, 123, 191, 74, 73, 36, 57, 108, 29, 57, 130, 54, 198, 156, 134, 90, 153, 96, 190, 75, 143, 169, 131, 152, 6, 238, 22, 89, 9, 155, 189, 118, 53, 40, 22, 173, 69, 112, 27, 96, 140, 218, 154, 84, 199, 99, 116, 84, 83, 68, 113, 182, 71, 70, 145, 77, 195, 48, 90, 31, 197, 235, 43, 201, 186, 75, 123, 213, 108, 41, 186, 197, 57, 210, 208, 218, 2, 79, 50, 192, 18, 16, 67, 118, 247, 18, 238, 181, 104, 68, 98, 29, 90, 59, 133, 29, 236, 1, 238, 104, 28, 171, 44, 87, 240, 13, 172, 24, 149, 128, 228, 27, 200, 70, 57, 100, 36, 99, 180, 196, 7, 53, 209, 20, 72, 80, 136, 165, 144, 44, 63, 27, 179, 105, 139, 175, 157, 60, 100, 187, 21, 152, 17, 24, 21, 75, 25, 98, 168, 17, 104, 212, 217, 22, 81, 194, 202, 6, 29, 2, 10, 247, 189, 237, 23, 19, 148, 165, 50, 174, 94, 91, 220, 48, 8, 83, 248, 126, 184, 40, 225, 59, 53, 161, 213, 113, 177, 6, 194, 98, 98, 131, 185, 147, 43, 151, 116, 248, 129, 231, 211, 87, 237, 52, 166, 145, 138, 52, 219, 157, 147, 91, 18, 82, 103, 129, 114, 248, 79, 63, 247, 239, 248, 183, 154, 50, 236, 62, 75, 187, 29, 215, 80, 35, 93, 51, 94, 172, 183, 32, 194, 99, 148, 222, 6, 92, 33, 229, 185, 116, 172, 242, 131, 83, 135, 53, 30, 77, 124, 105, 174, 43, 33, 161, 193, 128, 36, 48, 58, 82, 51, 227, 210, 103, 47, 105, 249, 126, 87, 17, 147, 241, 89, 177, 138, 36, 137, 165, 73, 32, 26, 50, 205, 114, 204, 157, 129, 55, 113, 121, 14, 165, 142, 90, 10, 56, 172, 86, 191, 193, 11, 22, 83, 51, 20, 54, 52, 2, 82, 21, 21, 104, 187, 186, 182, 124, 190, 230, 82, 112, 232, 144, 223, 215, 244, 95, 63, 195, 187, 185, 35, 31, 192, 14, 138, 94, 37, 203, 220, 238, 93, 117, 6, 103, 64, 223, 91, 156, 16, 56, 209, 11, 162, 52, 189, 32, 19, 242, 96, 237, 71, 181, 143, 191, 57, 155, 11, 236, 7, 239, 137, 224, 209, 115, 15, 31, 222, 42, 218, 119, 169, 6, 32, 40, 114, 154, 211, 237, 62, 172, 235, 115, 130, 8, 244, 137, 110, 157, 63, 220, 68, 56, 162, 160, 79, 122, 172, 206, 218, 5, 255, 38, 226, 218, 209, 249, 98, 253, 192, 101, 224, 95, 176, 11, 59, 228, 237, 228, 201, 49, 177, 25, 151, 113, 226, 218, 243, 0,63, 186, 116, 47, 13, 161, 85, 242, 26, 213, 119, 89, 44, 19, 33, 9, 202, 192, 110, 3, 37, 195, 155, 231, 217, 51, 81, 6, 146, 123, 170, 21, 173, 32, 22, 111, 188, 103, 248, 23, 58, 129, 178, 109, 154, 229, 204, 253, 225, 152, 19, 243, 246, 232, 217, 71, 45, 74, 242, 159, 246, 65, 172, 43, 62, 127, 202, 134, 138, 96, 124, 182, 45, 192, 80, 7, 129, 101, 127, 80, 164, 107, 51, 182, 92, 112, 20, 129, 104, 59, 21, 11, 14, 151, 83, 34, 182, 20, 237, 99, 52, 11, 224, 69, 150, 41, 77, 125, 159, 38, 16, 128, 132, 7, 54, 135, 13, 146, 176, 112, 31, 22, 134, 93, 123, 174, 28, 147, 182, 149, 25, 150, 132, 223, 79, 210, 236, 46, 35, 119, 144, 134, 53, 99, 184, 142, 120, 245, 228, 176, 98, 210, 136, 197, 175, 82, 198, 206, 240, 93, 89, 56, 92, 4, 80, 249, 52, 233, 233, 109, 206, 242, 161, 161, 112, 82, 116, 23, 21, 57, 134, 155, 228, 197, 140, 3, 47, 244, 201, 242, 182, 108, 13, 235, 166, 216, 197, 253, 150, 169, 56, 71, 12, 127, 232, 135, 57, 146, 107, 136, 254, 191, 72, 21, 244, 127, 17, 131, 191, 127, 106, 158, 18, 201, 181, 217, 127, 187, 231, 65, 182, 32, 92, 164, 220, 200, 151, 181, 101, 3, 135, 190, 76, 5, 81, 158, 135, 78, 135, 104, 88, 126, 141, 246, 114, 228, 6, 37, 240, 66, 93, 49, 222, 231, 230, 10, 67, 88, 145, 204, 207, 6, 235, 228, 201, 166, 3, 124, 69, 205, 184, 238, 139, 56, 73, 23, 88, 30, 30, 233, 191, 163, 107, 249, 132, 0,221, 230, 75, 150, 67, 137, 67, 171, 48, 24, 205, 177, 157, 251, 70, 106, 211, 93, 43, 72, 99, 169, 228, 145, 108, 124, 214, 171, 69, 111, 157, 235, 107, 37, 70, 16, 178, 248, 166, 34, 219, 66, 69, 61, 35, 1, 4, 18, 187, 52, 39, 139, 252, 190, 157, 38, 195, 231, 251, 236, 137, 49, 57, 8, 205, 247, 75, 246, 217, 244, 96, 88, 39, 64, 11, 53, 130, 195, 153, 58, 145, 156, 178, 61, 139, 226, 119, 211, 191, 175, 190, 54, 12, 22, 91, 45, 128, 233, 253, 231, 57, 212, 6, 242, 246, 58, 112, 119, 244, 223, 59, 18, 135, 23, 159, 92, 15, 121, 31, 49, 92, 202, 171, 70, 215, 207, 21, 131, 170, 46, 139, 238, 174, 105, 64, 112, 23, 71, 25, 31, 170, 152, 236, 4, 229, 109, 5, 79, 135, 79, 131, 64, 213, 230, 190, 185, 120, 212, 220, 164, 204, 47, 235, 197, 135, 52, 246, 149, 187, 75, 4, 27, 170, 96, 124, 110, 96, 220, 30, 198, 167, 116, 160, 117, 199, 228, 14, 70, 122, 133, 40, 242, 174, 92, 100, 91, 217, 217, 184, 27, 60, 21, 222, 0,249, 158, 190, 158, 159, 139, 107, 223, 203, 85, 132, 9, 133, 154, 196, 39, 54, 147, 70, 54, 140, 59, 73, 149, 21, 225, 102, 152, 19, 191, 154, 30, 2, 187, 4, 14, 13, 51, 20, 137, 47, 13, 154, 122, 188, 207, 76, 211, 207, 170, 120, 117, 130, 182, 254, 83, 219, 163, 27, 172, 23, 80, 54, 209, 51, 96, 209, 217, 226, 17, 137, 36, 95, 0,54, 100, 79, 126, 192, 241, 125, 88, 72, 21, 59, 170, 58, 177, 24, 133, 83, 109, 250, 149, 215, 23, 238, 6, 225, 129, 120, 24, 100, 107, 245, 180, 92, 128, 111, 82, 162, 138, 17, 48, 41, 47, 221, 186, 127, 143, 78, 114, 91, 12, 11, 71, 23, 95, 165, 181, 81, 225, 205, 92, 135, 145, 137, 230, 199, 245, 2, 104, 199, 122, 183, 52, 70, 48, 58, 89, 233, 79, 51, 141, 243, 201, 41, 101, 146, 160, 67, 21, 36, 109, 93, 196, 132, 167, 226, 223, 55, 229, 55, 74, 139, 39, 2, 126, 165, 178, 52, 28, 40, 217, 130, 45, 60, 26, 11, 216, 191, 172, 207, 171, 246, 171, 37, 247, 55, 64, 117, 17, 247, 53, 104, 53, 64, 113, 42, 38, 123, 150, 117, 72, 189, 225, 21, 19, 219, 19, 182, 78, 250, 192, 85, 106, 252, 241, 241, 143, 170, 82, 19, 231, 168, 150, 56, 145, 226, 235, 149, 103, 198, 101, 87, 165, 134, 107, 49, 221, 111, 25, 65, 91, 220, 93, 8, 112, 54, 94, 244, 131, 60, 90, 222, 228, 71, 214, 235, 182, 8, 70, 156, 8, 41, 225, 18, 138, 116, 134, 39, 198, 42, 197, 200, 216, 196, 85, 168, 23, 233, 19, 136, 218, 245, 193, 135, 245, 123, 105, 12, 232, 18, 11, 146, 4, 253, 237, 39, 41, 150, 91, 31, 148, 196, 24, 181, 133, 177, 34, 41, 53, 97, 180, 66, 155, 56, 126, 183, 11, 26, 51, 63, 151, 157, 137, 4, 113, 183, 156, 17, 38, 83, 104, 50, 212, 168, 218, 54, 226, 75, 119, 148, 169, 222, 33, 60, 247, 146, 247, 204, 235, 245, 146, 104, 222, 54, 14, 67, 166, 119, 149, 49, 96, 239, 7, 193, 84, 80, 86, 249, 85, 61, 24, 52, 29, 213, 108, 168, 192, 236, 41, 205, 84, 226, 175, 5, 68, 71, 85, 39, 164, 228, 170, 249, 4, 76, 45, 8, 208, 250, 52, 48, 131, 189, 229, 240, 17, 106, 29, 152, 18, 226, 5, 159, 72, 0,4, 199, 182, 73, 61, 22, 186, 72, 181, 94, 215, 233, 116, 239, 248, 142, 176, 201, 247, 102, 56, 253, 31, 32, 167, 12, 67, 104, 28, 119, 169, 71, 38, 121, 209, 58, 185, 71, 113, 229, 178, 128, 207, 38, 88, 41, 154, 197, 1, 235, 249, 66, 108, 184, 134, 223, 38, 63, 21, 169, 120, 150, 19, 75, 215, 18, 84, 72, 8, 74, 175, 148, 27, 155, 215, 195, 190, 128, 32, 146, 3, 185, 179, 33, 186, 209, 240, 37, 90, 55, 36, 43, 200, 57, 236, 77, 78, 25, 232, 196, 32, 201, 35, 149, 130, 49, 231, 164, 182, 111, 70, 209, 38, 72, 141, 37, 75, 178, 119, 127, 223, 145, 149, 47, 190, 205, 195, 122, 187, 67, 30, 90, 107, 148, 227, 179, 113, 122, 76, 206, 126, 247, 17, 41, 150, 223, 206, 152, 132, 31, 238, 73, 175, 141, 5, 82, 181, 107, 226, 126, 34, 74, 170, 117, 181, 223, 98, 151, 125, 19, 62, 175, 196, 180, 7, 57, 169, 119, 123, 249, 161, 30, 105, 159, 213, 92, 183, 109, 145, 134, 39, 72, 84, 19, 234, 253, 94, 203, 136, 96, 169, 227, 169, 151, 47, 48, 163, 2 };

static const unsigned char rndtable2[4096]= {75, 174, 231, 176, 184, 183, 139, 129, 216, 173, 11, 116, 171, 249, 214, 146, 95, 223, 97, 41, 101, 12, 183, 38, 239, 40, 7, 89, 178, 224, 123, 95, 253, 86, 235, 199, 94, 242, 44, 82, 239, 144, 203, 4, 133, 249, 34, 137, 117, 66, 75, 151, 202, 206, 181, 240, 9, 159, 97, 59, 80, 48, 193, 63, 52, 47, 131, 196, 187, 122, 32, 46, 123, 254, 62, 206, 198, 143, 89, 28, 253, 96, 30, 69, 22, 116, 23, 223, 60, 89, 38, 80, 77, 107, 52, 244, 144, 47, 52, 82, 165, 151, 98, 75, 64, 164, 5, 233, 129, 87, 199, 76, 66, 227, 195, 50, 182, 250, 13, 238, 11, 38, 83, 181, 144, 129, 188, 245, 20, 140, 190, 198, 198, 109, 240, 160, 226, 191, 122, 45, 227, 241, 160, 106, 185, 80, 105, 111, 211, 7, 37, 175, 74, 231, 199, 24, 165, 24, 177, 68, 16, 190, 122, 182, 176, 99, 212, 96, 31, 239, 89, 150, 152, 65, 89, 102, 148, 158, 123, 76, 253, 233, 246, 99, 251, 253, 151, 173, 193, 101, 200, 90, 72, 183, 248, 201, 46, 196, 109, 177, 68, 66, 175, 232, 110, 213, 58, 81, 138, 26, 232, 200, 34, 228, 8, 86, 108, 244, 150, 128, 5, 68, 86, 86, 103, 100, 227, 196, 218, 171, 239, 169, 242, 127, 13, 144, 54, 169, 62, 45, 223, 128, 155, 71, 189, 176, 241, 116, 141, 116, 42, 228, 251, 136, 189, 95, 161, 104, 26, 225, 242, 33, 53, 131, 19, 182, 239, 192, 236, 16, 32, 241, 181, 91, 65, 123, 81, 64, 205, 39, 143, 105, 89, 69, 105, 149, 43, 79, 166, 27, 19, 93, 103, 132, 189, 29, 22, 15, 122, 215, 25, 240, 187, 214, 148, 158, 65, 157, 19, 202, 214, 108, 191, 116, 26, 28, 66, 51, 140, 159, 200, 197, 122, 72, 49, 49, 252, 170, 106, 206, 91, 252, 112, 57, 157, 224, 53, 135, 2, 221, 226, 9, 85, 47, 160, 153, 224, 57, 244, 161, 197, 143, 108, 31, 15, 154, 228, 100, 216, 180, 62, 176, 1, 7, 185, 147, 223, 163, 142, 183, 103, 16, 127, 194, 195, 228, 71, 41, 113, 63, 234, 241, 41, 140, 173, 12, 199, 131, 134, 95, 120, 81, 117, 104, 6, 152, 242, 91, 59, 82, 32, 147, 142, 161, 244, 144, 55, 95, 246, 241, 234, 106, 77, 150, 47, 223, 79, 153, 43, 249, 152, 208, 72, 152, 230, 119, 228, 131, 177, 208, 101, 3, 122, 223, 208, 201, 85, 221, 5, 237, 247, 168, 28, 138, 9, 62, 111, 146, 229, 57, 242, 144, 119, 117, 66, 100, 214, 53, 226, 105, 199, 147, 163, 62, 15, 158, 1, 247, 167, 51, 170, 177, 186, 154, 12, 75, 13, 227, 209, 153, 67, 67, 235, 130, 227, 3, 114, 67, 179, 31, 63, 158, 38, 81, 161, 193, 58, 42, 235, 137, 29, 186, 246, 55, 42, 151, 208, 177, 212, 38, 13, 63, 30, 174, 18, 9, 220, 72, 193, 183, 16, 99, 166, 74, 254, 191, 140, 140, 138, 150, 23, 183, 134, 3, 111, 82, 78, 34, 152, 220, 36, 222, 90, 203, 2, 18, 242, 235, 173, 148, 251, 172, 221, 176, 221, 196, 45, 207, 102, 42, 83, 75, 189, 203, 1, 4, 246, 52, 35, 216, 250, 10, 17, 242, 106, 110, 121, 222, 76, 79, 70, 92, 23, 49, 235, 66, 180, 61, 207, 34, 160, 56, 111, 226, 23, 139, 239, 105, 182, 200, 181, 37, 138, 212, 66, 110, 162, 102, 118, 222, 231, 200, 200, 31, 182, 112, 155, 46, 50, 155, 55, 191, 238, 50, 83, 70, 202, 238, 46, 18, 67, 74, 126, 44, 159, 180, 116, 210, 142, 110, 1, 240, 191, 176, 100, 142, 252, 236, 225, 240, 6, 155, 254, 12, 99, 122, 85, 12, 185, 17, 126, 214, 8, 31, 253, 245, 107, 195, 63, 177, 155, 97, 31, 10, 91, 175, 95, 238, 133, 247, 130, 58, 54, 53, 120, 250, 195, 161, 56, 19, 249, 95, 67, 146, 232, 241, 149, 222, 69, 190, 20, 127, 12, 40, 5, 108, 108, 146, 113, 192, 183, 105, 132, 253, 15, 55, 71, 133, 31, 241, 248, 98, 20, 11, 110, 100, 45, 9, 166, 68, 59, 67, 133, 168, 50, 224, 123, 42, 178, 93, 85, 162, 69, 158, 246, 189, 82, 47, 76, 96, 167, 55, 215, 69, 131, 187, 182, 54, 166, 227, 231, 110, 223, 82, 198, 230, 228, 72, 140, 222, 23, 151, 153, 121, 248, 173, 227, 23, 168, 132, 192, 242, 198, 202, 164, 167, 119, 129, 8, 128, 24, 14, 8, 195, 90, 21, 115, 216, 57, 99, 112, 174, 15, 226, 182, 212, 181, 223, 145, 145, 75, 222, 161, 133, 120, 214, 73, 181, 210, 0,60, 81, 218, 62, 129, 50, 180, 216, 143, 211, 118, 104, 182, 131, 55, 199, 97, 147, 199, 110, 247, 171, 249, 195, 75, 192, 224, 230, 149, 182, 101, 234, 7, 145, 200, 174, 188, 217, 109, 84, 203, 250, 80, 230, 177, 138, 53, 202, 28, 200, 97, 120, 131, 39, 36, 121, 98, 88, 32, 170, 75, 42, 114, 171, 47, 137, 100, 176, 100, 2, 68, 37, 7, 149, 94, 51, 35, 239, 216, 185, 13, 225, 107, 60, 8, 151, 94, 39, 243, 8, 111, 5, 104, 41, 107, 89, 254, 164, 59, 141, 7, 63, 74, 149, 22, 159, 206, 15, 40, 219, 119, 65, 18, 11, 132, 147, 3, 46, 11, 58, 216, 198, 116, 79, 175, 253, 241, 232, 249, 121, 145, 156, 238, 225, 49, 153, 192, 165, 99, 145, 97, 178, 140, 186, 13, 215, 80, 167, 19, 200, 77, 254, 92, 58, 216, 232, 123, 4, 21, 156, 203, 15, 72, 154, 62, 168, 219, 20, 11, 213, 164, 81, 94, 144, 153, 61, 129, 34, 245, 238, 179, 63, 59, 139, 27, 109, 35, 251, 190, 197, 208, 182, 127, 94, 4, 69, 72, 165, 42, 83, 180, 84, 93, 205, 78, 6, 70, 243, 96, 52, 239, 102, 56, 236, 69, 217, 39, 197, 205, 134, 90, 90, 205, 107, 239, 28, 147, 52, 47, 115, 12, 215, 252, 212, 76, 24, 226, 22, 188, 167, 28, 44, 14, 7, 9, 130, 235, 46, 110, 55, 155, 167, 160, 254, 97, 17, 126, 186, 152, 242, 192, 155, 206, 80, 166, 108, 31, 188, 132, 113, 75, 149, 254, 163, 189, 130, 29, 16, 174, 180, 91, 189, 50, 36, 38, 249, 203, 144, 4, 176, 111, 87, 140, 73, 172, 221, 59, 166, 169, 238, 179, 247, 68, 129, 188, 145, 144, 59, 181, 86, 53, 100, 181, 12, 241, 51, 200, 178, 182, 23, 1, 254, 83, 29, 66, 52, 156, 149, 142, 220, 91, 234, 191, 113, 26, 255, 68, 112, 7, 125, 88, 79, 199, 31, 204, 134, 7, 133, 251, 17, 245, 9, 25, 244, 199, 191, 78, 202, 94, 64, 128, 202, 247, 167, 166, 142, 192, 15, 212, 164, 147, 247, 14, 251, 246, 20, 212, 115, 201, 145, 88, 28, 134, 51, 189, 53, 65, 145, 177, 166, 207, 92, 1, 98, 141, 186, 71, 35, 78, 228, 81, 34, 226, 119, 215, 118, 141, 97, 137, 119, 77, 23, 94, 212, 205, 55, 37, 251, 8, 22, 33, 52, 119, 93, 84, 225, 174, 132, 204, 165, 214, 254, 210, 78, 102, 220, 113, 57, 192, 243, 23, 66, 63, 237, 138, 85, 23, 68, 128, 164, 101, 155, 91, 160, 84, 51, 149, 44, 228, 150, 84, 233, 142, 119, 123, 42, 21, 90, 71, 176, 159, 168, 56, 137, 244, 15, 154, 45, 86, 2, 105, 109, 4, 20, 201, 9, 236, 2, 120, 86, 107, 95, 223, 34, 38, 146, 138, 180, 123, 231, 180, 5, 189, 176, 157, 60, 204, 215, 27, 253, 35, 197, 152, 125, 158, 47, 88, 229, 163, 43, 80, 134, 39, 18, 123, 24, 110, 144, 175, 142, 248, 2, 124, 43, 42, 45, 138, 248, 190, 154, 51, 89, 252, 1, 216, 42, 224, 175, 143, 185, 61, 140, 79, 0,217, 207, 170, 172, 51, 193, 157, 225, 79, 155, 134, 46, 151, 23, 192, 192, 54, 100, 174, 223, 196, 245, 57, 125, 145, 11, 245, 252, 182, 255, 11, 129, 157, 20, 19, 148, 91, 213, 219, 137, 102, 95, 218, 191, 207, 90, 157, 240, 39, 6, 72, 155, 128, 164, 130, 248, 249, 62, 162, 76, 81, 29, 65, 208, 152, 88, 105, 87, 75, 106, 223, 111, 81, 36, 218, 2, 97, 58, 126, 114, 107, 93, 57, 156, 88, 0,229, 155, 141, 231, 32, 213, 229, 59, 216, 153, 248, 1, 155, 136, 129, 226, 88, 57, 155, 167, 190, 154, 143, 243, 100, 52, 80, 223, 253, 218, 216, 92, 246, 41, 205, 162, 132, 6, 109, 180, 39, 122, 38, 134, 58, 73, 116, 114, 196, 41, 203, 133, 79, 246, 128, 155, 217, 220, 117, 99, 104, 79, 109, 35, 216, 171, 118, 155, 202, 115, 214, 98, 114, 95, 61, 221, 41, 1, 180, 114, 75, 69, 41, 116, 226, 227, 173, 67, 17, 194, 226, 38, 228, 82, 34, 192, 180, 62, 223, 112, 113, 16, 18, 99, 180, 22, 196, 35, 130, 97, 75, 240, 196, 186, 199, 189, 150, 83, 144, 85, 76, 31, 94, 26, 10, 58, 163, 216, 107, 11, 172, 66, 83, 145, 97, 26, 157, 33, 165, 126, 201, 155, 89, 131, 23, 134, 207, 243, 202, 106, 152, 59, 123, 130, 1, 108, 98, 53, 127, 183, 138, 150, 167, 22, 197, 34, 230, 110, 216, 205, 99, 83, 82, 227, 244, 87, 196, 84, 253, 239, 222, 210, 81, 62, 39, 143, 19, 78, 117, 106, 157, 1, 126, 67, 244, 102, 238, 77, 118, 79, 144, 141, 144, 165, 238, 43, 76, 132, 191, 172, 114, 9, 41, 67, 214, 164, 138, 231, 34, 2, 23, 85, 6, 162, 5, 21, 113, 5, 103, 42, 161, 117, 47, 132, 136, 197, 213, 30, 0,155, 126, 82, 180, 140, 56, 82, 134, 22, 253, 105, 85, 31, 239, 99, 222, 6, 224, 184, 96, 42, 17, 204, 11, 98, 98, 100, 101, 55, 211, 97, 199, 121, 78, 235, 250, 121, 71, 124, 234, 62, 152, 157, 6, 30, 74, 208, 168, 128, 207, 199, 77, 215, 49, 241, 241, 160, 97, 124, 55, 216, 177, 16, 78, 90, 231, 230, 175, 120, 255, 119, 233, 170, 16, 113, 152, 34, 27, 196, 189, 6, 185, 76, 53, 108, 207, 233, 1, 74, 107, 21, 123, 84, 229, 119, 80, 37, 65, 159, 62, 19, 111, 188, 58, 237, 224, 44, 147, 3, 79, 177, 22, 25, 38, 140, 240, 125, 82, 201, 98, 194, 144, 255, 213, 192, 119, 22, 254, 3, 159, 193, 20, 51, 70, 86, 11, 0,172, 159, 244, 146, 86, 241, 67, 251, 238, 8, 212, 242, 83, 214, 10, 191, 175, 110, 5, 143, 46, 213, 153, 45, 237, 243, 234, 211, 82, 238, 249, 225, 226, 161, 200, 42, 236, 159, 172, 36, 51, 192, 162, 93, 191, 50, 70, 132, 190, 10, 27, 178, 1, 140, 83, 255, 77, 183, 80, 3, 56, 28, 59, 123, 158, 194, 5, 114, 42, 187, 22, 230, 140, 194, 165, 146, 52, 200, 146, 101, 73, 67, 244, 10, 184, 184, 110, 72, 233, 144, 107, 18, 113, 234, 17, 189, 204, 61, 155, 106, 199, 128, 88, 111, 127, 226, 34, 131, 149, 125, 161, 137, 54, 236, 240, 9, 227, 125, 154, 219, 15, 106, 6, 24, 132, 177, 116, 7, 145, 48, 214, 180, 175, 8, 99, 239, 47, 203, 248, 87, 236, 155, 172, 236, 203, 15, 230, 162, 249, 223, 153, 99, 119, 60, 209, 164, 132, 26, 7, 190, 227, 18, 232, 31, 199, 35, 127, 13, 83, 61, 143, 195, 130, 126, 10, 158, 240, 252, 95, 112, 208, 67, 23, 110, 225, 240, 241, 186, 198, 109, 65, 59, 123, 101, 204, 104, 249, 120, 199, 149, 105, 147, 246, 168, 59, 128, 243, 67, 177, 166, 10, 29, 59, 44, 206, 197, 228, 136, 190, 11, 227, 35, 227, 227, 233, 176, 85, 80, 130, 229, 237, 113, 38, 140, 83, 230, 47, 43, 153, 216, 1, 52, 116, 12, 1, 53, 229, 252, 4, 127, 209, 107, 237, 176, 165, 138, 6, 176, 137, 219, 122, 21, 52, 210, 45, 77, 130, 120, 138, 160, 116, 180, 191, 214, 4, 69, 254, 81, 143, 65, 254, 117, 72, 147, 238, 144, 33, 24, 135, 208, 58, 222, 161, 98, 179, 166, 255, 168, 4, 205, 164, 74, 206, 196, 249, 223, 42, 156, 155, 74, 232, 107, 101, 15, 78, 19, 163, 150, 6, 100, 242, 220, 216, 198, 108, 241, 214, 70, 51, 160, 33, 100, 93, 198, 152, 22, 110, 20, 221, 28, 107, 121, 24, 82, 110, 31, 226, 136, 117, 120, 136, 91, 179, 249, 141, 164, 76, 17, 23, 106, 227, 46, 83, 158, 182, 22, 117, 140, 84, 67, 80, 172, 31, 198, 173, 91, 7, 7, 225, 35, 182, 154, 15, 94, 134, 214, 146, 115, 60, 212, 4, 89, 100, 72, 232, 224, 178, 8, 11, 237, 85, 28, 231, 254, 175, 233, 65, 76, 40, 97, 74, 82, 30, 34, 35, 228, 26, 38, 199, 164, 140, 243, 119, 92, 56, 36, 241, 231, 106, 231, 146, 29, 218, 65, 116, 181, 198, 224, 84, 90, 105, 227, 194, 196, 128, 62, 159, 94, 240, 83, 137, 229, 237, 228, 31, 107, 64, 191, 97, 98, 110, 106, 163, 157, 139, 161, 166, 205, 110, 178, 110, 128, 209, 130, 103, 160, 205, 181, 31, 81, 134, 114, 202, 45, 186, 61, 52, 35, 48, 163, 121, 202, 93, 219, 73, 82, 17, 8, 200, 72, 245, 105, 124, 9, 240, 220, 200, 251, 77, 179, 173, 192, 177, 123, 107, 2, 133, 75, 127, 244, 68, 233, 110, 128, 194, 141, 75, 131, 24, 244, 181, 20, 37, 81, 113, 102, 42, 216, 57, 150, 20, 216, 181, 200, 72, 188, 206, 3, 226, 247, 150, 150, 48, 129, 83, 35, 48, 128, 194, 27, 151, 177, 14, 52, 158, 116, 37, 64, 79, 145, 84, 210, 197, 132, 50, 129, 3, 146, 177, 181, 114, 222, 92, 181, 86, 183, 57, 38, 152, 84, 229, 42, 83, 168, 178, 47, 147, 88, 115, 196, 111, 116, 191, 237, 140, 99, 24, 35, 159, 86, 69, 136, 45, 175, 188, 229, 56, 247, 160, 175, 235, 118, 24, 165, 155, 244, 121, 177, 168, 254, 155, 59, 235, 172, 58, 124, 87, 58, 13, 98, 67, 156, 130, 33, 239, 201, 177, 214, 43, 211, 23, 175, 243, 138, 58, 107, 84, 61, 36, 122, 36, 28, 222, 212, 203, 197, 221, 32, 78, 249, 80, 23, 33, 162, 195, 227, 70, 25, 123, 191, 74, 73, 36, 57, 108, 29, 57, 130, 54, 198, 156, 134, 90, 153, 96, 190, 75, 143, 169, 131, 152, 6, 238, 22, 89, 9, 155, 189, 118, 53, 40, 22, 173, 69, 112, 27, 96, 140, 218, 154, 84, 199, 99, 116, 84, 83, 68, 113, 182, 71, 70, 145, 77, 195, 48, 90, 31, 197, 235, 43, 201, 186, 75, 123, 213, 108, 41, 186, 197, 57, 210, 208, 218, 2, 79, 50, 192, 18, 16, 67, 118, 247, 18, 238, 181, 104, 68, 98, 29, 90, 59, 133, 29, 236, 1, 238, 104, 28, 171, 44, 87, 240, 13, 172, 24, 149, 128, 228, 27, 200, 70, 57, 100, 36, 99, 180, 196, 7, 53, 209, 20, 72, 80, 136, 165, 144, 44, 63, 27, 179, 105, 139, 175, 157, 60, 100, 187, 21, 152, 17, 24, 21, 75, 25, 98, 168, 17, 104, 212, 217, 22, 81, 194, 202, 6, 29, 2, 10, 247, 189, 237, 23, 19, 148, 165, 50, 174, 94, 91, 220, 48, 8, 83, 248, 126, 184, 40, 225, 59, 53, 161, 213, 113, 177, 6, 194, 98, 98, 131, 185, 147, 43, 151, 116, 248, 129, 231, 211, 87, 237, 52, 166, 145, 138, 52, 219, 157, 147, 91, 18, 82, 103, 129, 114, 248, 79, 63, 247, 239, 248, 183, 154, 50, 236, 62, 75, 187, 29, 215, 80, 35, 93, 51, 94, 172, 183, 32, 194, 99, 148, 222, 6, 92, 33, 229, 185, 116, 172, 242, 131, 83, 135, 53, 30, 77, 124, 105, 174, 43, 33, 161, 193, 128, 36, 48, 58, 82, 51, 227, 210, 103, 47, 105, 249, 126, 87, 17, 147, 241, 89, 177, 138, 36, 137, 165, 73, 32, 26, 50, 205, 114, 204, 157, 129, 55, 113, 121, 14, 165, 142, 90, 10, 56, 172, 86, 191, 193, 11, 22, 83, 51, 20, 54, 52, 2, 82, 21, 21, 104, 187, 186, 182, 124, 190, 230, 82, 112, 232, 144, 223, 215, 244, 95, 63, 195, 187, 185, 35, 31, 192, 14, 138, 94, 37, 203, 220, 238, 93, 117, 6, 103, 64, 223, 91, 156, 16, 56, 209, 11, 162, 52, 189, 32, 19, 242, 96, 237, 71, 181, 143, 191, 57, 155, 11, 236, 7, 239, 137, 224, 209, 115, 15, 31, 222, 42, 218, 119, 169, 6, 32, 40, 114, 154, 211, 237, 62, 172, 235, 115, 130, 8, 244, 137, 110, 157, 63, 220, 68, 56, 162, 160, 79, 122, 172, 206, 218, 5, 255, 38, 226, 218, 209, 249, 98, 253, 192, 101, 224, 95, 176, 11, 59, 228, 237, 228, 201, 49, 177, 25, 151, 113, 226, 218, 243, 0,63, 186, 116, 47, 13, 161, 85, 242, 26, 213, 119, 89, 44, 19, 33, 9, 202, 192, 110, 3, 37, 195, 155, 231, 217, 51, 81, 6, 146, 123, 170, 21, 173, 32, 22, 111, 188, 103, 248, 23, 58, 129, 178, 109, 154, 229, 204, 253, 225, 152, 19, 243, 246, 232, 217, 71, 45, 74, 242, 159, 246, 65, 172, 43, 62, 127, 202, 134, 138, 96, 124, 182, 45, 192, 80, 7, 129, 101, 127, 80, 164, 107, 51, 182, 92, 112, 20, 129, 104, 59, 21, 11, 14, 151, 83, 34, 182, 20, 237, 99, 52, 11, 224, 69, 150, 41, 77, 125, 159, 38, 16, 128, 132, 7, 54, 135, 13, 146, 176, 112, 31, 22, 134, 93, 123, 174, 28, 147, 182, 149, 25, 150, 132, 223, 79, 210, 236, 46, 35, 119, 144, 134, 53, 99, 184, 142, 120, 245, 228, 176, 98, 210, 136, 197, 175, 82, 198, 206, 240, 93, 89, 56, 92, 4, 80, 249, 52, 233, 233, 109, 206, 242, 161, 161, 112, 82, 116, 23, 21, 57, 134, 155, 228, 197, 140, 3, 47, 244, 201, 242, 182, 108, 13, 235, 166, 216, 197, 253, 150, 169, 56, 71, 12, 127, 232, 135, 57, 146, 107, 136, 254, 191, 72, 21, 244, 127, 17, 131, 191, 127, 106, 158, 18, 201, 181, 217, 127, 187, 231, 65, 182, 32, 92, 164, 220, 200, 151, 181, 101, 3, 135, 190, 76, 5, 81, 158, 135, 78, 135, 104, 88, 126, 141, 246, 114, 228, 6, 37, 240, 66, 93, 49, 222, 231, 230, 10, 67, 88, 145, 204, 207, 6, 235, 228, 201, 166, 3, 124, 69, 205, 184, 238, 139, 56, 73, 23, 88, 30, 30, 233, 191, 163, 107, 249, 132, 0,221, 230, 75, 150, 67, 137, 67, 171, 48, 24, 205, 177, 157, 251, 70, 106, 211, 93, 43, 72, 99, 169, 228, 145, 108, 124, 214, 171, 69, 111, 157, 235, 107, 37, 70, 16, 178, 248, 166, 34, 219, 66, 69, 61, 35, 1, 4, 18, 187, 52, 39, 139, 252, 190, 157, 38, 195, 231, 251, 236, 137, 49, 57, 8, 205, 247, 75, 246, 217, 244, 96, 88, 39, 64, 11, 53, 130, 195, 153, 58, 145, 156, 178, 61, 139, 226, 119, 211, 191, 175, 190, 54, 12, 22, 91, 45, 128, 233, 253, 231, 57, 212, 6, 242, 246, 58, 112, 119, 244, 223, 59, 18, 135, 23, 159, 92, 15, 121, 31, 49, 92, 202, 171, 70, 215, 207, 21, 131, 170, 46, 139, 238, 174, 105, 64, 112, 23, 71, 25, 31, 170, 152, 236, 4, 229, 109, 5, 79, 135, 79, 131, 64, 213, 230, 190, 185, 120, 212, 220, 164, 204, 47, 235, 197, 135, 52, 246, 149, 187, 75, 4, 27, 170, 96, 124, 110, 96, 220, 30, 198, 167, 116, 160, 117, 199, 228, 14, 70, 122, 133, 40, 242, 174, 92, 100, 91, 217, 217, 184, 27, 60, 21, 222, 0,249, 158, 190, 158, 159, 139, 107, 223, 203, 85, 132, 9, 133, 154, 196, 39, 54, 147, 70, 54, 140, 59, 73, 149, 21, 225, 102, 152, 19, 191, 154, 30, 2, 187, 4, 14, 13, 51, 20, 137, 47, 13, 154, 122, 188, 207, 76, 211, 207, 170, 120, 117, 130, 182, 254, 83, 219, 163, 27, 172, 23, 80, 54, 209, 51, 96, 209, 217, 226, 17, 137, 36, 95, 0,54, 100, 79, 126, 192, 241, 125, 88, 72, 21, 59, 170, 58, 177, 24, 133, 83, 109, 250, 149, 215, 23, 238, 6, 225, 129, 120, 24, 100, 107, 245, 180, 92, 128, 111, 82, 162, 138, 17, 48, 41, 47, 221, 186, 127, 143, 78, 114, 91, 12, 11, 71, 23, 95, 165, 181, 81, 225, 205, 92, 135, 145, 137, 230, 199, 245, 2, 104, 199, 122, 183, 52, 70, 48, 58, 89, 233, 79, 51, 141, 243, 201, 41, 101, 146, 160, 67, 21, 36, 109, 93, 196, 132, 167, 226, 223, 55, 229, 55, 74, 139, 39, 2, 126, 165, 178, 52, 28, 40, 217, 130, 45, 60, 26, 11, 216, 191, 172, 207, 171, 246, 171, 37, 247, 55, 64, 117, 17, 247, 53, 104, 53, 64, 113, 42, 38, 123, 150, 117, 72, 189, 225, 21, 19, 219, 19, 182, 78, 250, 192, 85, 106, 252, 241, 241, 143, 170, 82, 19, 231, 168, 150, 56, 145, 226, 235, 149, 103, 198, 101, 87, 165, 134, 107, 49, 221, 111, 25, 65, 91, 220, 93, 8, 112, 54, 94, 244, 131, 60, 90, 222, 228, 71, 214, 235, 182, 8, 70, 156, 8, 41, 225, 18, 138, 116, 134, 39, 198, 42, 197, 200, 216, 196, 85, 168, 23, 233, 19, 136, 218, 245, 193, 135, 245, 123, 105, 12, 232, 18, 11, 146, 4, 253, 237, 39, 41, 150, 91, 31, 148, 196, 24, 181, 133, 177, 34, 41, 53, 97, 180, 66, 155, 56, 126, 183, 11, 26, 51, 63, 151, 157, 137, 4, 113, 183, 156, 17, 38, 83, 104, 50, 212, 168, 218, 54, 226, 75, 119, 148, 169, 222, 33, 60, 247, 146, 247, 204, 235, 245, 146, 104, 222, 54, 14, 67, 166, 119, 149, 49, 96, 239, 7, 193, 84, 80, 86, 249, 85, 61, 24, 52, 29, 213, 108, 168, 192, 236, 41, 205, 84, 226, 175, 5, 68, 71, 85, 39, 164, 228, 170, 249, 4, 76, 45, 8, 208, 250, 52, 48, 131, 189, 229, 240, 17, 106, 29, 152, 18, 226, 5, 159, 72, 0,4, 199, 182, 73, 61, 22, 186, 72, 181, 94, 215, 233, 116, 239, 248, 142, 176, 201, 247, 102, 56, 253, 31, 32, 167, 12, 67, 104, 28, 119, 169, 71, 38, 121, 209, 58, 185, 71, 113, 229, 178, 128, 207, 38, 88, 41, 154, 197, 1, 235, 249, 66, 108, 184, 134, 223, 38, 63, 21, 169, 120, 150, 19, 75, 215, 18, 84, 72, 8, 74, 175, 148, 27, 155, 215, 195, 190, 128, 32, 146, 3, 185, 179, 33, 186, 209, 240, 37, 90, 55, 36, 43, 200, 57, 236, 77, 78, 25, 232, 196, 32, 201, 35, 149, 130, 49, 231, 164, 182, 111, 70, 209, 38, 72, 141, 37, 75, 178, 119, 127, 223, 145, 149, 47, 190, 205, 195, 122, 187, 67, 30, 90, 107, 148, 227, 179, 113, 122, 76, 206, 126, 247, 17, 41, 150, 223, 206, 152, 132, 31, 238, 73, 175, 141, 5, 82, 181, 107, 226, 126, 34, 74, 170, 117, 181, 223, 98, 151, 125, 19, 62, 175, 196, 180, 7, 57, 169, 119, 123, 249, 161, 30, 105, 159, 213, 92, 183, 109, 145, 134, 39, 72, 84, 19, 234, 253, 94, 203, 136, 96, 169, 227, 169, 151, 47, 48, 163, 2 };

int M_Random4 ()
{
	/*const unsigned char rndtable[256]= {
0,   8, 109, 220, 222, 241, 149, 107,  75, 248, 254, 140,  16,  66 ,
    74,  21, 211,  47,  80, 242, 154,  27, 205, 128, 161,  89,  77,  36 ,
    95, 110,  85,  48, 212, 140, 211, 249,  22,  79, 200,  50,  28, 188 ,
    52, 140, 202, 120,  68, 145,  62,  70, 184, 190,  91, 197, 152, 224 ,
    149, 104,  25, 178, 252, 182, 202, 182, 141, 197,   4,  81, 181, 242 ,
    145,  42,  39, 227, 156, 198, 225, 193, 219,  93, 122, 175, 249,   0 ,
    175, 143,  70, 239,  46, 246, 163,  53, 163, 109, 168, 135,   2, 235 ,
    25,  92,  20, 145, 138,  77,  69, 166,  78, 176, 173, 212, 166, 113 ,
    94, 161,  41,  50, 239,  49, 111, 164,  70,  60,   2,  37, 171,  75 ,
    136, 156,  11,  56,  42, 146, 138, 229,  73, 146,  77,  61,  98, 196 ,
    135, 106,  63, 197, 195,  86,  96, 203, 113, 101, 170, 247, 181, 113 ,
    80, 250, 108,   7, 255, 237, 129, 226,  79, 107, 112, 166, 103, 241 ,
    24, 223, 239, 120, 198,  58,  60,  82, 128,   3, 184,  66, 143, 224 ,
    145, 224,  81, 206, 163,  45,  63,  90, 168, 114,  59,  33, 159,  95 ,
    28, 139, 123,  98, 125, 196,  15,  70, 194, 253,  54,  14, 109, 226 ,
    71,  17, 161,  93, 186,  87, 244, 138,  20,  52, 123, 251,  26,  36 ,
    17,  46,  52, 231, 232,  76,  31, 221,  84,  37, 216, 165, 212, 106 ,
    197, 242,  98,  43,  39, 175, 254, 145, 190,  84, 118, 222, 187, 136 ,
    120, 163, 236, 249 };
	*/

    //rndindexA = (rndindexA+1)&0xff;
	rndindexA = (rndindexA+1)&0xfff;
	//if (debugfile) fprintf (debugfile, "MRandom3%d",rndindexA);
	//Printf("rndINDEXa: %d",rndindexA);

    return rndtable2[rndindexA];
}

//CVAR (Bool, sd_artifacts, true,CVAR_ARCHIVE) //GHK: console var for displaying p_random or m_random custom monsters
//CVAR (Bool, sd_artifacts, true,CVAR_ARCHIVE)
//CVAR (Int, sd_artifact_chance, 50,CVAR_ARCHIVE) //ghk: meaningful values are 0->255
//THIS SCREWS UP NET GAMES, NEED TO ADD IT TO DMFLAGS OR SOMETHING, AT THE LEAST FORCE THE CLIENTS TO USE
//NET ARBITRATOR'S VALUE

//ghk COMMENT OUT FOR NOW
/*static const unsigned char rndtable[256]= {
0,   8, 109, 220, 222, 241, 149, 107,  75, 248, 254, 140,  16,  66 ,
    74,  21, 211,  47,  80, 242, 154,  27, 205, 128, 161,  89,  77,  36 ,
    95, 110,  85,  48, 212, 140, 211, 249,  22,  79, 200,  50,  28, 188 ,
    52, 140, 202, 120,  68, 145,  62,  70, 184, 190,  91, 197, 152, 224 ,
    149, 104,  25, 178, 252, 182, 202, 182, 141, 197,   4,  81, 181, 242 ,
    145,  42,  39, 227, 156, 198, 225, 193, 219,  93, 122, 175, 249,   0 ,
    175, 143,  70, 239,  46, 246, 163,  53, 163, 109, 168, 135,   2, 235 ,
    25,  92,  20, 145, 138,  77,  69, 166,  78, 176, 173, 212, 166, 113 ,
    94, 161,  41,  50, 239,  49, 111, 164,  70,  60,   2,  37, 171,  75 ,
    136, 156,  11,  56,  42, 146, 138, 229,  73, 146,  77,  61,  98, 196 ,
    135, 106,  63, 197, 195,  86,  96, 203, 113, 101, 170, 247, 181, 113 ,
    80, 250, 108,   7, 255, 237, 129, 226,  79, 107, 112, 166, 103, 241 ,
    24, 223, 239, 120, 198,  58,  60,  82, 128,   3, 184,  66, 143, 224 ,
    145, 224,  81, 206, 163,  45,  63,  90, 168, 114,  59,  33, 159,  95 ,
    28, 139, 123,  98, 125, 196,  15,  70, 194, 253,  54,  14, 109, 226 ,
    71,  17, 161,  93, 186,  87, 244, 138,  20,  52, 123, 251,  26,  36 ,
    17,  46,  52, 231, 232,  76,  31, 221,  84,  37, 216, 165, 212, 106 ,
    197, 242,  98,  43,  39, 175, 254, 145, 190,  84, 118, 222, 187, 136 ,
    120, 163, 236, 249 };
*/

/***************************** IceChunk ************************************/

class AIceChunk : public AActor
{
	DECLARE_ACTOR (AIceChunk, AActor)
};

FState AIceChunk::States[] =
{
	S_NORMAL (ICEC, 'A',   10, NULL 					, &States[1]),
	S_NORMAL (ICEC, 'B',   10, A_IceSetTics 			, &States[2]),
	S_NORMAL (ICEC, 'C',   10, A_IceSetTics 			, &States[3]),
	S_NORMAL (ICEC, 'D',   10, A_IceSetTics 			, NULL),
};

IMPLEMENT_ACTOR (AIceChunk, Any, -1, 0)
	PROP_RadiusFixed (3)
	PROP_HeightFixed (4)
	PROP_Mass(5)
	PROP_Gravity (FRACUNIT/8)
	PROP_Flags (MF_DROPOFF)
	PROP_Flags2 (MF2_CANNOTPUSH|MF2_FLOORCLIP|MF2_NOTELEPORT)

	PROP_SpawnState (0)
END_DEFAULTS

/***************************************************************************/

// A chunk of ice that is also a player -------------------------------------

class AIceChunkHead : public APlayerChunk
{
	DECLARE_ACTOR (AIceChunkHead, APlayerChunk)
};

FState AIceChunkHead::States[] =
{
	S_NORMAL (PLAY, 'A',	0, NULL						, &States[1]),
	S_NORMAL (ICEC, 'A',   10, A_IceCheckHeadDone		, &States[1])
};

IMPLEMENT_ACTOR (AIceChunkHead, Any, -1, 0)
	PROP_RadiusFixed (3)
	PROP_HeightFixed (4)
	PROP_Mass(5)
	PROP_DamageType (NAME_Ice)
	PROP_Gravity (FRACUNIT/8)
	PROP_Flags (MF_DROPOFF)
	PROP_Flags2 (MF2_CANNOTPUSH)

	PROP_SpawnState (0)
END_DEFAULTS

//----------------------------------------------------------------------------
//
// PROC A_NoBlocking
//
//----------------------------------------------------------------------------

void A_NoBlocking (AActor *actor)
{
	

	// [RH] Andy Baker's stealth monsters
	if (actor->flags & MF_STEALTH)
	{
		actor->alpha = OPAQUE;
		actor->visdir = 0;
	}

	actor->flags &= ~MF_SOLID;

	// If the actor has a conversation that sets an item to drop, drop that.
	if (actor->Conversation != NULL && actor->Conversation->DropType != NULL)
	{
		P_DropItem (actor, actor->Conversation->DropType, -1, 256);
		actor->Conversation = NULL;
		return;
	}

	actor->Conversation = NULL;

	// If the actor has attached metadata for items to drop, drop those.
	// Otherwise, call NoBlockingSet() and let it decide what to drop.
	if (!actor->IsKindOf (RUNTIME_CLASS (APlayerPawn)))	// [GRB]
	{
		FDropItem *di = GetDropItems(RUNTIME_TYPE(actor));

		if (di != NULL)
		{
			while (di != NULL)
			{
				if (di->Name != NAME_None)
				{
					const PClass *ti = PClass::FindClass(di->Name);
					if (ti) P_DropItem (actor, ti, di->amount, di->probability);
				}
				di = di->Next;
			}
		}
		else
		{
			actor->NoBlockingSet ();
		}
		
		//ghk also make sure that cvar sd_artifacts is on too
		
		if(sd_artifacts&&((actor->flags & MF_COUNTKILL) && !(actor->flags & MF_FRIENDLY))){ //ghk basically Countsaskill()
			//Printf (PRINT_MEDIUM, "%s%d\n","rndindex:",rndindexA);

			//bit of a hack, but for online hi scoring
			//do a check to for sd-artifacts and if not found and sd_global_scoing is on
			//then return, since with it being on, some extra regular powerups
			//will spawn
			//if(!PClass::FindClass ("SDSmartBomb")&&sd_global_hiscores)
			//It should always return, even for non online scoring games
			//like offline and MP! sd_artifacts flag should be depricated
			//if(!PClass::FindClass ("SDSmartBomb")) (check added in calling function)
				//return newtypeinfo;

			if(actor->GetDefault()->health<20) //dont do anything for monsters with less than 20hp
				return;

			if(sd_custom_replacements){
				const PClass *newtypeinfoA; // = PClass::FindClass("SDArtiSpawner");//GHK this
				int rnd = 0;
				int rndH = 0;
				bool blGetHealth = false;

				//Printf (PRINT_MEDIUM, "%d\n", M_Random4());
				//if(M_Random4()<10){

					//P_DropItem (actor, newtypeinfo,1, 256); //255
				//}

				//Lets drop health now id sd_artifacts is enabled
				//better for custom monsters

				if(!multiplayer&&!sp_random_custom_monsters2){
					rndH =M_Random4()%100 + 1;

				}else{
					rndH=pr_gkspawnchance2(100) + 1;


				}
				if(sd_kill_extrahealth_chance2>0&&sdExtraHealthRepCount>0){

					if(sd_kill_extrahealth_chance2>=rndH){ //default 35
							blGetHealth=true;
						}




					if(blGetHealth){
						//if (debugfile) fprintf (debugfile, "healthNumber%d",rnd);
						if(!multiplayer&&!sp_random_custom_monsters2){
							if(sdExtraHealthRange>=255){
								rnd=int(((float(M_Random4()) + 1.0)/256.0)*float(sdExtraHealthRange));

							}else{
								rnd=M_Random4()%sdExtraHealthRange + 1;
							}
						}else{
							rnd=pr_gkspawnchance(sdExtraHealthRange) + 1;
						}


									//now loop through range array to get corresponding index
									//of creature array
						for(int i=0;i<sdExtraHealthRepCount;i++){

							if(rnd<=sdExtraHealthRepChances[i]){
								newtypeinfoA=PClass::FindClass(sdExtraHealthReps[i]);
								break;
							}


						}


						//if (debugfile) fprintf (debugfile, "type1: %s",newtypeinfoA->TypeName.GetChars());

						//AActor::StaticSpawn (newtypeinfoA, ix, iy, iz+ 8 * FRACUNIT, ALLOW_REPLACE, false);

						P_DropItem (actor, newtypeinfoA,-1, 255);


						//if (newtypeinfoA != NULL && newtypeinfo->ActorInfo != NULL){

								//if (debugfile) fprintf (debugfile, "CLASSH: %s\n",newtypeinfoA->ActorInfo->Class->TypeName.GetChars());

						//}


						//P_DropItem (actor, newtypeinfoA,-1, 255);
						//AActor::StaticSpawn (newtypeinfoA, ix, iy, iz+ 8 * FRACUNIT, ALLOW_REPLACE, false);

					}else{
						//progress the rndtable regardless for consistency
							if(!multiplayer&&!sp_random_custom_monsters2)
								M_Random4();
					}
				}else{
					//progress the rndtable regardless for consistency
							if(!multiplayer&&!sp_random_custom_monsters2)
								M_Random4();
				}


				//default sd_artifact_chance = 10
				if(!multiplayer&&!sp_random_custom_monsters2){
					rnd =M_Random4()%100 + 1;

				}else{
					rnd=pr_gkspawnchance2(100) + 1;


				}

				if(sd_kill_artifact_chance2>0&&sdArtiRepCount>0){

					if(sd_kill_artifact_chance2>=rnd){
								//ok, now find which creature gets picked.
								//within the range
								if(!multiplayer&&!sp_random_custom_monsters2){
									if(sdArtiRange>=255){
										rnd=int(((float(M_Random4()) + 1.0)/256.0)*float(sdArtiRange));

									}else{
										rnd=M_Random4()%sdArtiRange + 1;
									}
								}else{
									rnd=pr_gkspawnchance2(sdArtiRange) + 1;
								}

								//ghk check if an artifact has already been spawned
								//if not, then look for the next non-spawned artifiact to spawn
								if(arrArtifacts[rnd]>0){
									int sdArtiRepCountMid = ceil(float(sdArtiRepCount)/2.0);
									if(rnd>sdArtiRepCountMid){
										for(int j=0;j<sdArtiRepCount;j++)
										{	//if everything has spawned at least once, then spawn multiples.
											if(arrArtifacts[j]==0){
												rnd=j;
												break;
											}
										}
									}else{

										int sdArtiRepCount2 = sdArtiRepCount-1;
										for(int j=sdArtiRepCount2;j>-1;j--)
										{	//if everything has spawned at least once, then spawn multiples.
											if(arrArtifacts[j]==0){
												rnd=j;
												break;
											}
										}

									}


								}


								//now loop through range array to get corresponding index
								//of creature array
								for(int i=0;i<sdArtiRepCount;i++){

									if(rnd<=sdArtiRepChances[i]){
										arrArtifacts[i]++;
										newtypeinfoA=PClass::FindClass(sdArtiReps[i]);
										break;
									}

								}

								//if (debugfile) fprintf (debugfile, "type1: %s",newtypeinfoA->TypeName.GetChars());

							P_DropItem (actor, newtypeinfoA,1, 255);


							}else{
							//progress the rndtable regardless for consistency
							if(!multiplayer&&!sp_random_custom_monsters2)
								M_Random4();
					}

				}else{
							//progress the rndtable regardless for consistency
						if(!multiplayer&&!sp_random_custom_monsters2)
							M_Random4();
				}
				//ghk check if an artifact has already been spawned
				//if not, then look for the next non-spawned artifiact to spawn
				//Printf (PRINT_MEDIUM, "%s%d\n","HEY2:",rnd);


							//if (newtypeinfoA != NULL && newtypeinfo->ActorInfo != NULL){

							//if (debugfile) fprintf (debugfile, "CLASSA: %s\n",newtypeinfoA->ActorInfo->Class->TypeName.GetChars());

							//}
							//if(M_Random4()%4>2){

								//Printf (PRINT_MEDIUM, "%s%d\n","HEY:",rnd);
								//P_DropItem (actor, newtypeinfoA,1, 255);


				//if (debugfile) fprintf (debugfile, "type1: %s",newtypeinfoA->TypeName.GetChars());

						//AActor::StaticSpawn (newtypeinfoA, ix, iy, iz+ 8 * FRACUNIT, ALLOW_REPLACE, false);
							//}
			//}


			}else{
			//if ((level.flags & (LEVEL_CYBORGSPECIAL|
				//LEVEL_SPIDERSPECIAL|LEVEL_BRUISERSPECIAL)) == 0){//ghk dont spawn on 'boss' levels
				const PClass *newtypeinfoA; // = PClass::FindClass("SDArtiSpawner");//GHK this
				int rnd = 0;
				int rndH = 0;
				bool blGetHealth = false;

				//Printf (PRINT_MEDIUM, "%d\n", M_Random4());
				//if(M_Random4()<10){

					//P_DropItem (actor, newtypeinfo,1, 256); //255
				//}

				//Lets drop health now id sd_artifacts is enabled
				//better for custom monsters

				if(!multiplayer&&!sp_random_custom_monsters2){
					int rnd2 =M_Random4();

					if(M_Random4()<=sd_kill_extrahealth_chance2){ //default 35
						rndH=rnd2%6;
						blGetHealth=true;
					}


				}else{

					if(pr_gkspawnchance2(256)<=sd_kill_extrahealth_chance2){ //default 35

						rndH=pr_gkspawnchance2(6);
						blGetHealth=true;

					}

				}

				if(blGetHealth){
					//if (debugfile) fprintf (debugfile, "healthNumber%d",rnd);
					switch (rndH){

								case 0:
								case 1:
								case 2:
									newtypeinfoA = PClass::FindClass ("StimPack");
									break;
								case 3:
								case 4:
									newtypeinfoA = PClass::FindClass ("Medikit");
									break;
								case 5:
								case 6:
									newtypeinfoA = PClass::FindClass ("GreenArmor");
									break;



					}
					//if (newtypeinfoA != NULL && newtypeinfo->ActorInfo != NULL){

							//if (debugfile) fprintf (debugfile, "CLASSH: %s\n",newtypeinfoA->ActorInfo->Class->TypeName.GetChars());

					//}


					P_DropItem (actor, newtypeinfoA,-1, 255);
					//AActor::StaticSpawn (newtypeinfoA, ix, iy, iz+ 8 * FRACUNIT, ALLOW_REPLACE, false);

				}



				//default sd_artifact_chance = 10
				if(!multiplayer&&!sp_random_custom_monsters2){
					int rnd2 =M_Random4();

						if(M_Random4()>sd_kill_artifact_chance2) return; //cvar sd_artifact_chance default is 50 (out of 255)
						rnd=rnd2%16;


				}else{

					if(pr_gkspawnchance2(256)>sd_kill_artifact_chance2) return;

						rnd=pr_gkspawnchance2(16);

				}



				//ghk check if an artifact has already been spawned
				//if not, then look for the next non-spawned artifiact to spawn
				//Printf (PRINT_MEDIUM, "%s%d\n","HEY2:",rnd);

				if(arrArtifacts[rnd]>0){
					if(rnd>7){
						for(int j=0;j<16;j++)
						{	//if everything has spawned at least once, then spawn multiples.
							if(arrArtifacts[j]==0){
								rnd=j;
								break;
							}
						}
					}else{
						for(int j=15;j>-1;j--)
						{	//if everything has spawned at least once, then spawn multiples.
							if(arrArtifacts[j]==0){
								rnd=j;
								break;
							}
						}

					}
				}
				//if (debugfile) fprintf (debugfile, "artiNumber:%d",rnd);
							switch (rnd){

								case 0:
									arrArtifacts[0]++;
									newtypeinfoA = PClass::FindClass ("TerrorSphere");
									break;
								case 1:
									arrArtifacts[1]++;
									newtypeinfoA = PClass::FindClass ("ArtiSpeedBoots2");
									break;
								case 2:
									arrArtifacts[2]++;
									newtypeinfoA = PClass::FindClass ("ArtiDarkServant2");
									break;
								case 3:
									arrArtifacts[3]++;
									//newtypeinfoA = PClass::FindClass ("BruiserDemon");
									newtypeinfoA = PClass::FindClass ("QuarterDamage");
									break;
								//case 4:
									//newtypeinfoA = PClass::FindClass ("Deathknight");
									//break;
								case 4:
									arrArtifacts[4]++;
									newtypeinfoA = PClass::FindClass ("QuadDamage");
									break;
								//case 5:
									//arrArtifacts[5]++;
									//newtypeinfoA = PClass::FindClass ("PointsBunnySpawner");
									//break;
								case 5:
									arrArtifacts[5]++;
									//newtypeinfoA = PClass::FindClass ("GodAvatar");
									newtypeinfoA = PClass::FindClass ("DoubleDamage");
									break;
								case 6://pk3
									arrArtifacts[6]++;
									newtypeinfoA = PClass::FindClass ("Regen");
									break;
								case 7:
									arrArtifacts[7]++;
									newtypeinfoA = PClass::FindClass ("Drain");
									break;
								case 8:
									arrArtifacts[8]++;
									newtypeinfoA = PClass::FindClass ("HalfDamage");
									break;
								case 9:
									arrArtifacts[9]++;
									newtypeinfoA = PClass::FindClass ("InvulnerabilitySphere");
									break;

								case 10:
									{
										int rnd3=0;
										int rnd4 =M_Random4();
										arrArtifacts[10]++;
										//arrArtifacts[11]++;
										//newtypeinfoA = PClass::FindClass ("ArtiPredator");
										if(!multiplayer&&!sp_random_custom_monsters2){

											rnd3=rnd4%2;
										}else{

											rnd3=pr_gkspawnchance2(2);
										}

										switch (rnd3){
											case 0:
												newtypeinfoA = PClass::FindClass ("BigBackPack2");
												break;
											case 1:
											case 2:
												newtypeinfoA = PClass::FindClass ("BigBackPack");
												break;

										}
									}
									//arrArtifacts[11]++;
									//newtypeinfoA = PClass::FindClass ("BigBackPack");
									break;
								case 11:
									//arrArtifacts[11]++;
									//arrArtifacts[11]++;
									//newtypeinfoA = PClass::FindClass ("ArtiPorkSD");
									{
										int rnd3=0;
										int rnd4 =M_Random4();
										arrArtifacts[11]++;
										//arrArtifacts[11]++;
										//newtypeinfoA = PClass::FindClass ("ArtiPredator");
										if(!multiplayer&&!sp_random_custom_monsters2){

											rnd3=rnd4%6;
										}else{

											rnd3=pr_gkspawnchance2(6);
										}
										//if (debugfile) fprintf (debugfile, "secondartiNumber%d",rnd3);
										switch (rnd3){

											case 0:
												newtypeinfoA = PClass::FindClass ("Berserk");
												break;
											case 1:
												newtypeinfoA = PClass::FindClass ("BlurSphere");
												break;
											case 2:
												newtypeinfoA = PClass::FindClass ("BlueArmor");
												break;
											case 3:
												newtypeinfoA = PClass::FindClass ("SoulSphereSD");
												break;
											case 4:
												{
													if(gameinfo.flags & GI_MAPxx){  //only for Doom2+
														newtypeinfoA = PClass::FindClass ("Megasphere");
														break;
													}else{//ultimate doom wads, ondeath spawns shotgunguy instead
														newtypeinfoA = PClass::FindClass ("SoulSphereSD");
														break;
													}
												}
											case 5:
											case 6:
												newtypeinfoA = PClass::FindClass ("Backpack");
												break;

											//case 7:
												//newtypeinfoA = PClass::FindClass ("SpherePrecog");
												//break;

											//case 8:
												//newtypeinfoA = PClass::FindClass ("InvulnerabilitySphere");
												//break;

										}
									}
									break;
								case 12:
									{
										int rnd3=0;
										int rnd4 =M_Random4();
										arrArtifacts[12]++;
										//arrArtifacts[11]++;
										//newtypeinfoA = PClass::FindClass ("ArtiPredator");
										if(!multiplayer&&!sp_random_custom_monsters2){

											rnd3=rnd4%6;
										}else{

											rnd3=pr_gkspawnchance2(6);
										}
										//if (debugfile) fprintf (debugfile, "thirdartiNumber%d",rnd3);
										switch (rnd3){

											case 0:
												newtypeinfoA = PClass::FindClass ("Berserk");
												break;
											case 1:
												newtypeinfoA = PClass::FindClass ("BlurSphere");
												break;
											case 2:
												newtypeinfoA = PClass::FindClass ("BlueArmor");
												break;
											case 3:
												newtypeinfoA = PClass::FindClass ("SoulSphereSD");
												break;
											case 4:
												{
													if(gameinfo.flags & GI_MAPxx){  //only for Doom2+
														newtypeinfoA = PClass::FindClass ("Megasphere");
														break;
													}else{//ultimate doom wads, ondeath spawns shotgunguy instead
														newtypeinfoA = PClass::FindClass ("SoulSphereSD");
														break;
													}
												}
											case 5:
											case 6:
												newtypeinfoA = PClass::FindClass ("Backpack");
												break;

											//case 7:
												//newtypeinfoA = PClass::FindClass ("SpherePrecog");
												//break;

											//case 8:
												//newtypeinfoA = PClass::FindClass ("InvulnerabilitySphere");
												//break;

										}
									}
									break;
								case 13:
									arrArtifacts[13]++;
									newtypeinfoA = PClass::FindClass ("TimeFreezer");
									break;
								case 14:
									arrArtifacts[14]++;
									newtypeinfoA = PClass::FindClass ("SDSmartBomb");
									break;
								case 15:
								case 16:
									arrArtifacts[15]++;
									//arrArtifacts[11]++;
									newtypeinfoA = PClass::FindClass ("ArtiSentryServant");
									break;

							}

							//if (newtypeinfoA != NULL && newtypeinfo->ActorInfo != NULL){

							//if (debugfile) fprintf (debugfile, "CLASSA: %s\n",newtypeinfoA->ActorInfo->Class->TypeName.GetChars());

							//}
							//if(M_Random4()%4>2){

								//Printf (PRINT_MEDIUM, "%s%d\n","HEY:",rnd);
								P_DropItem (actor, newtypeinfoA,1, 255);
							//AActor::StaticSpawn (newtypeinfoA, ix, iy, iz+ 8 * FRACUNIT, ALLOW_REPLACE, false);
							//}
			//}

		}
	}

	}
}

//==========================================================================
//
// A_SetFloorClip
//
//==========================================================================

void A_SetFloorClip (AActor *actor)
{
	actor->flags2 |= MF2_FLOORCLIP;
	actor->AdjustFloorClip ();
}

//==========================================================================
//
// A_UnSetFloorClip
//
//==========================================================================

void A_UnSetFloorClip (AActor *actor)
{
	actor->flags2 &= ~MF2_FLOORCLIP;
	actor->floorclip = 0;
}

//==========================================================================
//
// A_HideThing
//
//==========================================================================

void A_HideThing (AActor *actor)
{
	actor->renderflags |= RF_INVISIBLE;
}

//==========================================================================
//
// A_UnHideThing
//
//==========================================================================

void A_UnHideThing (AActor *actor)
{
	actor->renderflags &= ~RF_INVISIBLE;
}

//============================================================================
//
// A_FreezeDeath
//
//============================================================================

void A_FreezeDeath (AActor *actor)
{
	int t = pr_freezedeath();
	actor->tics = 75+t+pr_freezedeath();
	actor->flags |= MF_SOLID|MF_SHOOTABLE|MF_NOBLOOD|MF_ICECORPSE;
	actor->flags2 |= MF2_PUSHABLE|MF2_TELESTOMP|MF2_PASSMOBJ|MF2_SLIDE;
	actor->flags3 |= MF3_CRASHED;
	actor->height = actor->GetDefault()->height;
	S_Sound (actor, CHAN_BODY, "misc/freeze", 1, ATTN_NORM);

	// [RH] Andy Baker's stealth monsters
	if (actor->flags & MF_STEALTH)
	{
		actor->alpha = OPAQUE;
		actor->visdir = 0;
	}

	if (actor->player)
	{
		actor->player->damagecount = 0;
		actor->player->poisoncount = 0;
		actor->player->bonuscount = 0;
	}
	else if (actor->flags3&MF3_ISMONSTER && actor->special)
	{ // Initiate monster death actions
		LineSpecials [actor->special] (NULL, actor, false, actor->args[0],
			actor->args[1], actor->args[2], actor->args[3], actor->args[4]);
		actor->special = 0;
	}
}

//============================================================================
//
// A_IceSetTics
//
//============================================================================

void A_IceSetTics (AActor *actor)
{
	int floor;

	actor->tics = 70+(pr_icesettics()&63);
	floor = P_GetThingFloorType (actor);
	if (Terrains[floor].DamageMOD == NAME_Fire)
	{
		actor->tics >>= 2;
	}
	else if (Terrains[floor].DamageMOD == NAME_Ice)
	{
		actor->tics <<= 1;
	}
}

//============================================================================
//
// A_IceCheckHeadDone
//
//============================================================================

void A_IceCheckHeadDone (AActor *actor)
{
	if (actor->player == NULL)
	{
		actor->Destroy ();
	}
}

//============================================================================
//
// A_FreezeDeathChunks
//
//============================================================================

void A_FreezeDeathChunks (AActor *actor)
{

	int i;
	int numChunks;
	AActor *mo;
	
	if (actor->momx || actor->momy || actor->momz)
	{
		actor->tics = 3*TICRATE;
		return;
	}
	S_Sound (actor, CHAN_BODY, "misc/icebreak", 1, ATTN_NORM);

	// [RH] In Hexen, this creates a random number of shards (range [24,56])
	// with no relation to the size of the actor shattering. I think it should
	// base the number of shards on the size of the dead thing, so bigger
	// things break up into more shards than smaller things.
	// An actor with radius 20 and height 64 creates ~40 chunks.
	numChunks = MAX<int> (4, (actor->radius>>FRACBITS)*(actor->height>>FRACBITS)/32);
	i = (pr_freeze.Random2()) % (numChunks/4);
	for (i = MAX (24, numChunks + i); i >= 0; i--)
	{
		mo = Spawn<AIceChunk> (
			actor->x + (((pr_freeze()-128)*actor->radius)>>7), 
			actor->y + (((pr_freeze()-128)*actor->radius)>>7), 
			actor->z + (pr_freeze()*actor->height/255), ALLOW_REPLACE);
		mo->SetState (mo->SpawnState + (pr_freeze()%3));
		if (mo)
		{
			mo->momz = FixedDiv(mo->z-actor->z, actor->height)<<2;
			mo->momx = pr_freeze.Random2 () << (FRACBITS-7);
			mo->momy = pr_freeze.Random2 () << (FRACBITS-7);
			A_IceSetTics (mo); // set a random tic wait
			mo->RenderStyle = actor->RenderStyle;
			mo->alpha = actor->alpha;
		}
	}
	if (actor->player)
	{ // attach the player's view to a chunk of ice
		AIceChunkHead *head = Spawn<AIceChunkHead> (actor->x, actor->y, 
													actor->z + actor->player->mo->ViewHeight, ALLOW_REPLACE);
		head->momz = FixedDiv(head->z-actor->z, actor->height)<<2;
		head->momx = pr_freeze.Random2 () << (FRACBITS-7);
		head->momy = pr_freeze.Random2 () << (FRACBITS-7);
		head->player = actor->player;
		actor->player = NULL;
		head->ObtainInventory (actor);
		head->health = actor->health;
		head->angle = actor->angle;
		head->player->mo = head;
		head->pitch = 0;
		head->RenderStyle = actor->RenderStyle;
		head->alpha = actor->alpha;
		if (head->player->camera == actor)
		{
			head->player->camera = head;
		}
	}

	// [RH] Do some stuff to make this more useful outside Hexen
	if (actor->flags4 & MF4_BOSSDEATH)
	{
		A_BossDeath (actor);
	}
	A_NoBlocking (actor);

	actor->Destroy ();
}

//----------------------------------------------------------------------------
//
// CorpseQueue Routines (used by Hexen)
//
//----------------------------------------------------------------------------

// Corpse queue for monsters - this should be saved out

class DCorpsePointer : public DThinker
{
	DECLARE_CLASS (DCorpsePointer, DThinker)
	HAS_OBJECT_POINTERS
public:
	DCorpsePointer (AActor *ptr);
	void Destroy ();
	void Serialize (FArchive &arc);
	AActor *Corpse;
	DWORD Count;	// Only the first corpse pointer's count is valid.
private:
	DCorpsePointer () {}
};

IMPLEMENT_POINTY_CLASS(DCorpsePointer)
 DECLARE_POINTER(Corpse)
END_POINTERS

CUSTOM_CVAR(Int, sv_corpsequeuesize, 64, CVAR_ARCHIVE|CVAR_SERVERINFO)
{
	if (self > 0)
	{
		TThinkerIterator<DCorpsePointer> iterator (STAT_CORPSEPOINTER);
		DCorpsePointer *first = iterator.Next ();
		while (first != NULL && first->Count > (DWORD)self)
		{
			DCorpsePointer *next = iterator.Next ();
			next->Count = first->Count;
			first->Destroy ();
			first = next;
		}
	}
}


DCorpsePointer::DCorpsePointer (AActor *ptr)
: DThinker (STAT_CORPSEPOINTER), Corpse (ptr)
{
	Count = 0;

	// Thinkers are added to the end of their respective lists, so
	// the first thinker in the list is the oldest one.
	TThinkerIterator<DCorpsePointer> iterator (STAT_CORPSEPOINTER);
	DCorpsePointer *first = iterator.Next ();

	if (first != this)
	{
		if (first->Count >= (DWORD)sv_corpsequeuesize)
		{
			DCorpsePointer *next = iterator.Next ();
			next->Count = first->Count;
			first->Destroy ();
			return;
		}
	}
	++first->Count;
}

void DCorpsePointer::Destroy ()
{
	// Store the count of corpses in the first thinker in the list
	TThinkerIterator<DCorpsePointer> iterator (STAT_CORPSEPOINTER);
	DCorpsePointer *first = iterator.Next ();

	int prevCount = first->Count;

	if (first == this)
	{
		first = iterator.Next ();
	}

	if (first != NULL)
	{
		first->Count = prevCount - 1;
	}

	if (Corpse != NULL)
	{
		Corpse->Destroy ();
	}
	Super::Destroy ();
}

void DCorpsePointer::Serialize (FArchive &arc)
{
	arc << Corpse << Count;
}


// throw another corpse on the queue
void A_QueueCorpse (AActor *actor)
{
	if (sv_corpsequeuesize > 0)
		new DCorpsePointer (actor);
}

// Remove an actor from the queue (for resurrection)
void A_DeQueueCorpse (AActor *actor)
{
	TThinkerIterator<DCorpsePointer> iterator (STAT_CORPSEPOINTER);
	DCorpsePointer *corpsePtr;

	while ((corpsePtr = iterator.Next()) != NULL)
	{
		if (corpsePtr->Corpse == actor)
		{
			corpsePtr->Corpse = NULL;
			corpsePtr->Destroy ();
			return;
		}
	}
}

//============================================================================
//
// A_SetInvulnerable
//
//============================================================================

void A_SetInvulnerable (AActor *actor)
{
	actor->flags2 |= MF2_INVULNERABLE;
}

//============================================================================
//
// A_UnSetInvulnerable
//
//============================================================================

void A_UnSetInvulnerable (AActor *actor)
{
	actor->flags2 &= ~MF2_INVULNERABLE;
}

//============================================================================
//
// A_SetReflective
//
//============================================================================

void A_SetReflective (AActor *actor)
{
	actor->flags2 |= MF2_REFLECTIVE;
}

//============================================================================
//
// A_UnSetReflective
//
//============================================================================

void A_UnSetReflective (AActor *actor)
{
	actor->flags2 &= ~MF2_REFLECTIVE;
}

//============================================================================
//
// A_SetReflectiveInvulnerable
//
//============================================================================

void A_SetReflectiveInvulnerable (AActor *actor)
{
	actor->flags2 |= MF2_REFLECTIVE|MF2_INVULNERABLE;
}

//============================================================================
//
// A_UnSetReflectiveInvulnerable
//
//============================================================================

void A_UnSetReflectiveInvulnerable (AActor *actor)
{
	actor->flags2 &= ~(MF2_REFLECTIVE|MF2_INVULNERABLE);
}

//==========================================================================
//
// A_SetShootable
//
//==========================================================================

void A_SetShootable (AActor *actor)
{
	actor->flags2 &= ~MF2_NONSHOOTABLE;
	actor->flags |= MF_SHOOTABLE;
}

//==========================================================================
//
// A_UnSetShootable
//
//==========================================================================

void A_UnSetShootable (AActor *actor)
{
	actor->flags2 |= MF2_NONSHOOTABLE;
	actor->flags &= ~MF_SHOOTABLE;
}

//===========================================================================
//
// A_NoGravity
//
//===========================================================================

void A_NoGravity (AActor *actor)
{
	actor->flags |= MF_NOGRAVITY;
}

//===========================================================================
//
// A_Gravity
//
//===========================================================================

void A_Gravity (AActor *actor)
{
	actor->flags &= ~MF_NOGRAVITY;
	actor->gravity = FRACUNIT;
}

//===========================================================================
//
// A_LowGravity
//
//===========================================================================

void A_LowGravity (AActor *actor)
{
	actor->flags &= ~MF_NOGRAVITY;
	actor->gravity = FRACUNIT/8;
}

//===========================================================================
//
// FaceMovementDirection
//
//===========================================================================

void FaceMovementDirection (AActor *actor)
{
	switch (actor->movedir)
	{
	case DI_EAST:
		actor->angle = 0<<24;
		break;
	case DI_NORTHEAST:
		actor->angle = 32<<24;
		break;
	case DI_NORTH:
		actor->angle = 64<<24;
		break;
	case DI_NORTHWEST:
		actor->angle = 96<<24;
		break;
	case DI_WEST:
		actor->angle = 128<<24;
		break;
	case DI_SOUTHWEST:
		actor->angle = 160<<24;
		break;
	case DI_SOUTH:
		actor->angle = 192<<24;
		break;
	case DI_SOUTHEAST:
		actor->angle = 224<<24;
		break;
	}
}

